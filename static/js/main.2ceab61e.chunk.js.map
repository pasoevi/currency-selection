{"version":3,"sources":["CurrencySelection/CurrencySelection.module.css","CurrencySelection/Currency/Currency.module.css","CurrencySelection/SelectedCurrency/SelectedCurrency.module.css","CurrencySelection/Currency/Currency.tsx","CurrencySelection/SelectedCurrency/SelectedCurrency.tsx","CurrencySelection/CurrencySelection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","IsoCurrency","CurrencyComponent","props","currency","onChange","className","classNames","styles","selected","onClick","name","type","checked","isoCurrency","SelectedCurrency","onDeselect","data-role","CurrencySelection","onCurrencyChanged","state","currencies","filter","c","length","newCurrencies","map","setState","this","selectedCurrencies","React","Component","SelectedCurrencies","slice","key","AvailableCurrencies","CZK","DKK","EUR","GBP","GEL","PLN","RUB","SEK","USD","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ceab61e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"currencySelection\":\"CurrencySelection_currencySelection__BjNBY\",\"selectedCurrencies\":\"CurrencySelection_selectedCurrencies__33Mpp\",\"tooMany\":\"CurrencySelection_tooMany__2TMKG\",\"emptyCurrencies\":\"CurrencySelection_emptyCurrencies__1DPdn\",\"availableCurrencies\":\"CurrencySelection_availableCurrencies__3JYyq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currency\":\"Currency_currency__1Y6wN\",\"selected\":\"Currency_selected__9TGYd\",\"title\":\"Currency_title__By1ZM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currency\":\"SelectedCurrency_currency__1fhso\",\"deselect\":\"SelectedCurrency_deselect__23qna\",\"title\":\"SelectedCurrency_title__24GpV\"};","import * as styles from \"./Currency.module.css\";\r\nimport React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nexport enum IsoCurrency {\r\n  EUR = \"EUR\",\r\n  PLN = \"PLN\",\r\n  GEL = \"GEL\",\r\n  DKK = \"DKK\",\r\n  CZK = \"CZK\",\r\n  GBP = \"GBP\",\r\n  SEK = \"SEK\",\r\n  USD = \"USD\",\r\n  RUB = \"RUB\"\r\n}\r\n\r\nexport interface Currency {\r\n  selected: boolean;\r\n  isoCurrency: IsoCurrency;\r\n}\r\n\r\nexport interface CurrencyComponentProps {\r\n  currency: Currency;\r\n  onChange: (currency: Currency, selected: boolean) => void;\r\n}\r\n\r\nexport const CurrencyComponent: React.FC<CurrencyComponentProps> = (props) => {\r\n  const { currency, onChange } = props;\r\n  return (\r\n    <div className={classNames(styles[\"currency\"], {\r\n      [styles[\"selected\"]]: currency.selected,\r\n    })} onClick={() => onChange(currency, !currency.selected)}>\r\n      <input\r\n        name=\"isSelected\"\r\n        type=\"checkbox\"\r\n        onChange={() => { /* handled in onClick of component root div*/}}\r\n        checked={currency.selected}\r\n      />\r\n      <div className={styles.title}>{currency.isoCurrency}</div>\r\n    </div>\r\n  );\r\n};\r\n","import * as styles from \"./SelectedCurrency.module.css\";\r\nimport React from \"react\";\r\nimport { IsoCurrency } from \"../Currency/Currency\";\r\n\r\nexport interface SelectedCurrencyProps {\r\n  isoCurrency: IsoCurrency;\r\n  onDeselect: () => void;\r\n}\r\n\r\nexport const SelectedCurrency: React.FC<SelectedCurrencyProps> = (props) => {\r\n  return (\r\n    <div className={styles[\"currency\"]}>\r\n      <div className={styles.title}>{props.isoCurrency}</div>\r\n      {/* TODO: Configure babel to remove data-roles used by tests */}\r\n      <div className={styles[\"deselect\"]} onClick={props.onDeselect} data-role=\"deselect\">\r\n        X\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import * as styles from \"./CurrencySelection.module.css\";\r\nimport React from \"react\";\r\nimport {\r\n  Currency,\r\n  CurrencyComponent,\r\n  CurrencyComponentProps,\r\n  IsoCurrency,\r\n} from \"./Currency/Currency\";\r\nimport { SelectedCurrency } from \"./SelectedCurrency/SelectedCurrency\";\r\n\r\nconst MaxCurrencies = 6;\r\n\r\nexport interface CurrencySelectionState {\r\n  currencies: Array<Currency>;\r\n}\r\n\r\nexport interface CurrencySelectionProps {\r\n  currencies: Array<IsoCurrency>;\r\n}\r\n\r\nexport interface SelectedCurrenciesProps {\r\n  currencies: Array<Currency>;\r\n  onChange: (currency: Currency, selected: boolean) => void;\r\n}\r\n\r\nexport interface CurrencyProps {\r\n  currencies: Array<CurrencyComponentProps>;\r\n}\r\n\r\nexport class CurrencySelection extends React.Component<\r\n  CurrencySelectionProps,\r\n  CurrencySelectionState\r\n> {\r\n  constructor(props: CurrencySelectionProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currencies: props.currencies.map((c) => ({\r\n        isoCurrency: c,\r\n        selected: false,\r\n      })),\r\n    };\r\n  }\r\n\r\n  onCurrencyChanged = (currency: Currency, selected: boolean): void => {\r\n    if (selected && this.state.currencies.filter((c) => c.selected).length >= MaxCurrencies) {\r\n      return;\r\n    }\r\n    const newCurrencies = this.state.currencies.map((c) =>\r\n      c.isoCurrency === currency.isoCurrency ? { ...c, selected: selected } : c\r\n    );\r\n    this.setState({\r\n      currencies: newCurrencies,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const currencies = this.state.currencies;\r\n    const selectedCurrencies = currencies.filter((c) => c.selected);\r\n    return (\r\n      <div className={styles[\"currencySelection\"]}>\r\n        <SelectedCurrencies\r\n          currencies={selectedCurrencies}\r\n          onChange={this.onCurrencyChanged}\r\n        />\r\n        <AvailableCurrencies onChange={this.onCurrencyChanged} currencies={currencies} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport class SelectedCurrencies extends React.Component<\r\n  SelectedCurrenciesProps\r\n> {\r\n  render() {\r\n    const { currencies, onChange } = this.props;\r\n    return (\r\n      <div className={styles[\"selectedCurrencies\"]}>\r\n        {currencies.length > 0 ? currencies.slice(0, MaxCurrencies).map((c) => (\r\n          <SelectedCurrency\r\n            key={c.isoCurrency}\r\n            isoCurrency={c.isoCurrency}\r\n            onDeselect={() => onChange(c, false)}\r\n          />\r\n        )): (\r\n          <div className={styles[\"emptyCurrencies\"]}>Select currencies below</div>\r\n        )\r\n      }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const AvailableCurrencies: React.FC<SelectedCurrenciesProps> = (props) => {\r\n  const { currencies, onChange } = props;\r\n  return (\r\n    <div className={styles[\"availableCurrencies\"]}>\r\n      {currencies.map((currency) => (\r\n        <CurrencyComponent\r\n          key={currency.isoCurrency}\r\n          currency={currency}\r\n          onChange={onChange}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { IsoCurrency } from './CurrencySelection/Currency/Currency';\r\nimport { CurrencySelection } from './CurrencySelection/CurrencySelection';\r\n\r\nconst currencies = [\r\n  IsoCurrency.CZK,\r\n  IsoCurrency.DKK,\r\n  IsoCurrency.EUR,\r\n  IsoCurrency.GBP,\r\n  IsoCurrency.GEL,\r\n  IsoCurrency.PLN,\r\n  IsoCurrency.RUB,\r\n  IsoCurrency.SEK,\r\n  IsoCurrency.USD,\r\n];\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <CurrencySelection currencies={currencies} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}